<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<longdescription>
		@Data.Array.Accelerate@ defines an embedded array language for computations
		for high-performance computing in Haskell. Computations on multi-dimensional,
		regular arrays are expressed in the form of parameterised collective
		operations, such as maps, reductions, and permutations. These computations may
		then be online compiled and executed on a range of architectures.
		
		[/A simple example/]
		
		As a simple example, consider the computation of a dot product of two vectors
		of floating point numbers:
		
		&gt; dotp :: Acc (Vector Float) -&gt; Acc (Vector Float) -&gt; Acc (Scalar Float)
		&gt; dotp xs ys = fold (+) 0 (zipWith (*) xs ys)
		
		Except for the type, this code is almost the same as the corresponding Haskell
		code on lists of floats. The types indicate that the computation may be
		online-compiled for performance - for example, using
		@Data.Array.Accelerate.CUDA@ it may be on-the-fly off-loaded to the GPU.
		
		[/Additional components/]
		
		The following supported add-ons are available as separate packages. Install
		them from Hackage with @cabal install \&lt;package\&gt;@
		
		* @accelerate-cuda@: Backend targeting CUDA-enabled NVIDIA GPUs. Requires
		the NVIDIA CUDA SDK and, for full functionality, hardware with compute
		compatibility 1.1 or greater. See the following table for supported GPUs:
		&lt;http://en.wikipedia.org/wiki/CUDA#Supported_GPUs&gt;
		
		* @accelerate-examples@: Computational kernels and applications showcasing
		the use of Accelerate as well as a regression test suite, supporting
		function and performance testing.
		
		* @accelerate-io@: Fast conversions between Accelerate arrays and other
		array formats (including vector and repa).
		
		* @accelerate-fft@: Discrete Fourier transforms, with optimised
		implementation for the CUDA backend.
		
		The following components are experimental and/or incomplete. Please contact us if
		you are interested in helping to work on or test them!
		
		* @accelerate-llvm@: A framework for constructing backends targeting LLVM
		IR, with concrete backends for multicore CPUs and NVIDIA GPUs.
		
		Additionally, the following libraries can be used with Accelerate:
		
		* @colour-accelerate@: Colour representations in Accelerate (RGB, sRGB, HSV,
		and HSL).
		
		* @gloss-accelerate@: Generate gloss pictures from Accelerate.
		
		* @gloss-raster-accelerate@: Parallel rendering of raster images and
		animations.
		
		* @lens-accelerate@: Lens operators for Accelerate types.
		
		* @linear-accelerate@: Linear vector spaces in Accelerate.
		
		* @mwc-random-accelerate@: Generate Accelerate arrays filled with high
		quality pseudorandom numbers.
		
		* @numeric-prelude-accelerate@: Lifting numeric-prelude to Accelerate.
		
		[/Examples and documentation/]
		
		Haddock documentation is included in the package, and a tutorial is available
		on the GitHub wiki: &lt;https://github.com/AccelerateHS/accelerate/wiki&gt;
		
		The @accelerate-examples@ package demonstrates a range of computational
		kernels and several complete applications, including:
		
		* An implementation of the Canny edge detection algorithm
		
		* An interactive Mandelbrot set generator
		
		* A particle-based simulation of stable fluid flows
		
		* An /n/-body simulation of gravitational attraction between solid particles
		
		* A cellular automata simulation
		
		* A \&quot;password recovery\&quot; tool, for dictionary lookup of MD5 hashes
		
		* A simple interactive ray tracer
		
		[/Mailing list and contacts/]
		
		* Mailing list: &lt;accelerate-haskell@googlegroups.com&gt; (discussion of both
		use and development welcome).
		
		* Sign up for the mailing list here:
		&lt;http://groups.google.com/group/accelerate-haskell&gt;
		
		* Bug reports and issue tracking:
		&lt;https://github.com/AccelerateHS/accelerate/issues&gt;
		
		[/Hackage note/]
		
		The module documentation list generated by Hackage is incorrect. The only
		exposed modules should be:
		
		* &quot;Data.Array.Accelerate&quot;
		
		* &quot;Data.Array.Accelerate.Interpreter&quot;
		
		* &quot;Data.Array.Accelerate.Data.Bits&quot;
		
		* &quot;Data.Array.Accelerate.Data.Complex&quot;
		
	</longdescription>
</pkgmetadata>
